// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthAttemptLog is an object representing the database table.
type AuthAttemptLog struct { // primary key
	AuthAttemptLogID int64 `boil:"auth_attempt_log_id" json:"auth_attempt_log_id" toml:"auth_attempt_log_id" yaml:"auth_attempt_log_id"`
	// client type. eg) cpi_url
	AuthAttemptLogClientType string `boil:"auth_attempt_log_client_type" json:"auth_attempt_log_client_type" toml:"auth_attempt_log_client_type" yaml:"auth_attempt_log_client_type"`
	// client network interface eg) br-lan
	AuthAttemptLogClientInterface string `boil:"auth_attempt_log_client_interface" json:"auth_attempt_log_client_interface" toml:"auth_attempt_log_client_interface" yaml:"auth_attempt_log_client_interface"`
	// lan ip address of client. includes ipv6
	AuthAttemptLogClientIP string `boil:"auth_attempt_log_client_ip" json:"auth_attempt_log_client_ip" toml:"auth_attempt_log_client_ip" yaml:"auth_attempt_log_client_ip"`
	// client mac address
	AuthAttemptLogClientMacAddress string `boil:"auth_attempt_log_client_mac_address" json:"auth_attempt_log_client_mac_address" toml:"auth_attempt_log_client_mac_address" yaml:"auth_attempt_log_client_mac_address"`
	// gateway name client wants to auth
	AuthAttemptLogClientGatewayName string `boil:"auth_attempt_log_client_gateway_name" json:"auth_attempt_log_client_gateway_name" toml:"auth_attempt_log_client_gateway_name" yaml:"auth_attempt_log_client_gateway_name"`
	// auth url for gateway
	AuthAttemptLogClientURL string `boil:"auth_attempt_log_client_url" json:"auth_attempt_log_client_url" toml:"auth_attempt_log_client_url" yaml:"auth_attempt_log_client_url"`
	// client unique value that identified in gateway LAN
	AuthAttemptLogClientHashID string `boil:"auth_attempt_log_client_hash_id" json:"auth_attempt_log_client_hash_id" toml:"auth_attempt_log_client_hash_id" yaml:"auth_attempt_log_client_hash_id"`
	// origin url from gateway auth request
	AuthAttemptLogOriginURL string `boil:"auth_attempt_log_origin_url" json:"auth_attempt_log_origin_url" toml:"auth_attempt_log_origin_url" yaml:"auth_attempt_log_origin_url"`
	// theme_spec file in gateway auth request
	AuthAttemptLogThemeSpecPath string `boil:"auth_attempt_log_theme_spec_path" json:"auth_attempt_log_theme_spec_path" toml:"auth_attempt_log_theme_spec_path" yaml:"auth_attempt_log_theme_spec_path"`
	// opennds version in gateway auth request
	AuthAttemptLogOpenndsVersion string `boil:"auth_attempt_log_opennds_version" json:"auth_attempt_log_opennds_version" toml:"auth_attempt_log_opennds_version" yaml:"auth_attempt_log_opennds_version"`
	// hashed client hid with gateway password
	AuthAttemptLogRhid string `boil:"auth_attempt_log_rhid" json:"auth_attempt_log_rhid" toml:"auth_attempt_log_rhid" yaml:"auth_attempt_log_rhid"`
	// session length minutes
	AuthAttemptLogSessionLengthMinutes int64 `boil:"auth_attempt_log_session_length_minutes" json:"auth_attempt_log_session_length_minutes" toml:"auth_attempt_log_session_length_minutes" yaml:"auth_attempt_log_session_length_minutes"`
	// upload rate threshold (KB/s)
	AuthAttemptLogUploadRateThreshold int64 `boil:"auth_attempt_log_upload_rate_threshold" json:"auth_attempt_log_upload_rate_threshold" toml:"auth_attempt_log_upload_rate_threshold" yaml:"auth_attempt_log_upload_rate_threshold"`
	// download rate threshold (KB/s)
	AuthAttemptLogDownloadRateThreshold int64 `boil:"auth_attempt_log_download_rate_threshold" json:"auth_attempt_log_download_rate_threshold" toml:"auth_attempt_log_download_rate_threshold" yaml:"auth_attempt_log_download_rate_threshold"`
	// upload quota (KB)
	AuthAttemptLogUploadQuota int64 `boil:"auth_attempt_log_upload_quota" json:"auth_attempt_log_upload_quota" toml:"auth_attempt_log_upload_quota" yaml:"auth_attempt_log_upload_quota"`
	// download quota (KB)
	AuthAttemptLogDownloadQuota int64 `boil:"auth_attempt_log_download_quota" json:"auth_attempt_log_download_quota" toml:"auth_attempt_log_download_quota" yaml:"auth_attempt_log_download_quota"`
	// json serialized custom tags
	AuthAttemptLogCustomValue null.JSON `boil:"auth_attempt_log_custom_value" json:"auth_attempt_log_custom_value,omitempty" toml:"auth_attempt_log_custom_value" yaml:"auth_attempt_log_custom_value,omitempty"`

	R *authAttemptLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authAttemptLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthAttemptLogColumns = struct {
	AuthAttemptLogID                    string
	AuthAttemptLogClientType            string
	AuthAttemptLogClientInterface       string
	AuthAttemptLogClientIP              string
	AuthAttemptLogClientMacAddress      string
	AuthAttemptLogClientGatewayName     string
	AuthAttemptLogClientURL             string
	AuthAttemptLogClientHashID          string
	AuthAttemptLogOriginURL             string
	AuthAttemptLogThemeSpecPath         string
	AuthAttemptLogOpenndsVersion        string
	AuthAttemptLogRhid                  string
	AuthAttemptLogSessionLengthMinutes  string
	AuthAttemptLogUploadRateThreshold   string
	AuthAttemptLogDownloadRateThreshold string
	AuthAttemptLogUploadQuota           string
	AuthAttemptLogDownloadQuota         string
	AuthAttemptLogCustomValue           string
}{
	AuthAttemptLogID:                    "auth_attempt_log_id",
	AuthAttemptLogClientType:            "auth_attempt_log_client_type",
	AuthAttemptLogClientInterface:       "auth_attempt_log_client_interface",
	AuthAttemptLogClientIP:              "auth_attempt_log_client_ip",
	AuthAttemptLogClientMacAddress:      "auth_attempt_log_client_mac_address",
	AuthAttemptLogClientGatewayName:     "auth_attempt_log_client_gateway_name",
	AuthAttemptLogClientURL:             "auth_attempt_log_client_url",
	AuthAttemptLogClientHashID:          "auth_attempt_log_client_hash_id",
	AuthAttemptLogOriginURL:             "auth_attempt_log_origin_url",
	AuthAttemptLogThemeSpecPath:         "auth_attempt_log_theme_spec_path",
	AuthAttemptLogOpenndsVersion:        "auth_attempt_log_opennds_version",
	AuthAttemptLogRhid:                  "auth_attempt_log_rhid",
	AuthAttemptLogSessionLengthMinutes:  "auth_attempt_log_session_length_minutes",
	AuthAttemptLogUploadRateThreshold:   "auth_attempt_log_upload_rate_threshold",
	AuthAttemptLogDownloadRateThreshold: "auth_attempt_log_download_rate_threshold",
	AuthAttemptLogUploadQuota:           "auth_attempt_log_upload_quota",
	AuthAttemptLogDownloadQuota:         "auth_attempt_log_download_quota",
	AuthAttemptLogCustomValue:           "auth_attempt_log_custom_value",
}

var AuthAttemptLogTableColumns = struct {
	AuthAttemptLogID                    string
	AuthAttemptLogClientType            string
	AuthAttemptLogClientInterface       string
	AuthAttemptLogClientIP              string
	AuthAttemptLogClientMacAddress      string
	AuthAttemptLogClientGatewayName     string
	AuthAttemptLogClientURL             string
	AuthAttemptLogClientHashID          string
	AuthAttemptLogOriginURL             string
	AuthAttemptLogThemeSpecPath         string
	AuthAttemptLogOpenndsVersion        string
	AuthAttemptLogRhid                  string
	AuthAttemptLogSessionLengthMinutes  string
	AuthAttemptLogUploadRateThreshold   string
	AuthAttemptLogDownloadRateThreshold string
	AuthAttemptLogUploadQuota           string
	AuthAttemptLogDownloadQuota         string
	AuthAttemptLogCustomValue           string
}{
	AuthAttemptLogID:                    "auth_attempt_log.auth_attempt_log_id",
	AuthAttemptLogClientType:            "auth_attempt_log.auth_attempt_log_client_type",
	AuthAttemptLogClientInterface:       "auth_attempt_log.auth_attempt_log_client_interface",
	AuthAttemptLogClientIP:              "auth_attempt_log.auth_attempt_log_client_ip",
	AuthAttemptLogClientMacAddress:      "auth_attempt_log.auth_attempt_log_client_mac_address",
	AuthAttemptLogClientGatewayName:     "auth_attempt_log.auth_attempt_log_client_gateway_name",
	AuthAttemptLogClientURL:             "auth_attempt_log.auth_attempt_log_client_url",
	AuthAttemptLogClientHashID:          "auth_attempt_log.auth_attempt_log_client_hash_id",
	AuthAttemptLogOriginURL:             "auth_attempt_log.auth_attempt_log_origin_url",
	AuthAttemptLogThemeSpecPath:         "auth_attempt_log.auth_attempt_log_theme_spec_path",
	AuthAttemptLogOpenndsVersion:        "auth_attempt_log.auth_attempt_log_opennds_version",
	AuthAttemptLogRhid:                  "auth_attempt_log.auth_attempt_log_rhid",
	AuthAttemptLogSessionLengthMinutes:  "auth_attempt_log.auth_attempt_log_session_length_minutes",
	AuthAttemptLogUploadRateThreshold:   "auth_attempt_log.auth_attempt_log_upload_rate_threshold",
	AuthAttemptLogDownloadRateThreshold: "auth_attempt_log.auth_attempt_log_download_rate_threshold",
	AuthAttemptLogUploadQuota:           "auth_attempt_log.auth_attempt_log_upload_quota",
	AuthAttemptLogDownloadQuota:         "auth_attempt_log.auth_attempt_log_download_quota",
	AuthAttemptLogCustomValue:           "auth_attempt_log.auth_attempt_log_custom_value",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AuthAttemptLogWhere = struct {
	AuthAttemptLogID                    whereHelperint64
	AuthAttemptLogClientType            whereHelperstring
	AuthAttemptLogClientInterface       whereHelperstring
	AuthAttemptLogClientIP              whereHelperstring
	AuthAttemptLogClientMacAddress      whereHelperstring
	AuthAttemptLogClientGatewayName     whereHelperstring
	AuthAttemptLogClientURL             whereHelperstring
	AuthAttemptLogClientHashID          whereHelperstring
	AuthAttemptLogOriginURL             whereHelperstring
	AuthAttemptLogThemeSpecPath         whereHelperstring
	AuthAttemptLogOpenndsVersion        whereHelperstring
	AuthAttemptLogRhid                  whereHelperstring
	AuthAttemptLogSessionLengthMinutes  whereHelperint64
	AuthAttemptLogUploadRateThreshold   whereHelperint64
	AuthAttemptLogDownloadRateThreshold whereHelperint64
	AuthAttemptLogUploadQuota           whereHelperint64
	AuthAttemptLogDownloadQuota         whereHelperint64
	AuthAttemptLogCustomValue           whereHelpernull_JSON
}{
	AuthAttemptLogID:                    whereHelperint64{field: "\"auth_attempt_log\".\"auth_attempt_log_id\""},
	AuthAttemptLogClientType:            whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_client_type\""},
	AuthAttemptLogClientInterface:       whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_client_interface\""},
	AuthAttemptLogClientIP:              whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_client_ip\""},
	AuthAttemptLogClientMacAddress:      whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_client_mac_address\""},
	AuthAttemptLogClientGatewayName:     whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_client_gateway_name\""},
	AuthAttemptLogClientURL:             whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_client_url\""},
	AuthAttemptLogClientHashID:          whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_client_hash_id\""},
	AuthAttemptLogOriginURL:             whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_origin_url\""},
	AuthAttemptLogThemeSpecPath:         whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_theme_spec_path\""},
	AuthAttemptLogOpenndsVersion:        whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_opennds_version\""},
	AuthAttemptLogRhid:                  whereHelperstring{field: "\"auth_attempt_log\".\"auth_attempt_log_rhid\""},
	AuthAttemptLogSessionLengthMinutes:  whereHelperint64{field: "\"auth_attempt_log\".\"auth_attempt_log_session_length_minutes\""},
	AuthAttemptLogUploadRateThreshold:   whereHelperint64{field: "\"auth_attempt_log\".\"auth_attempt_log_upload_rate_threshold\""},
	AuthAttemptLogDownloadRateThreshold: whereHelperint64{field: "\"auth_attempt_log\".\"auth_attempt_log_download_rate_threshold\""},
	AuthAttemptLogUploadQuota:           whereHelperint64{field: "\"auth_attempt_log\".\"auth_attempt_log_upload_quota\""},
	AuthAttemptLogDownloadQuota:         whereHelperint64{field: "\"auth_attempt_log\".\"auth_attempt_log_download_quota\""},
	AuthAttemptLogCustomValue:           whereHelpernull_JSON{field: "\"auth_attempt_log\".\"auth_attempt_log_custom_value\""},
}

// AuthAttemptLogRels is where relationship names are stored.
var AuthAttemptLogRels = struct {
}{}

// authAttemptLogR is where relationships are stored.
type authAttemptLogR struct {
}

// NewStruct creates a new relationship struct
func (*authAttemptLogR) NewStruct() *authAttemptLogR {
	return &authAttemptLogR{}
}

// authAttemptLogL is where Load methods for each relationship are stored.
type authAttemptLogL struct{}

var (
	authAttemptLogAllColumns            = []string{"auth_attempt_log_id", "auth_attempt_log_client_type", "auth_attempt_log_client_interface", "auth_attempt_log_client_ip", "auth_attempt_log_client_mac_address", "auth_attempt_log_client_gateway_name", "auth_attempt_log_client_url", "auth_attempt_log_client_hash_id", "auth_attempt_log_origin_url", "auth_attempt_log_theme_spec_path", "auth_attempt_log_opennds_version", "auth_attempt_log_rhid", "auth_attempt_log_session_length_minutes", "auth_attempt_log_upload_rate_threshold", "auth_attempt_log_download_rate_threshold", "auth_attempt_log_upload_quota", "auth_attempt_log_download_quota", "auth_attempt_log_custom_value"}
	authAttemptLogColumnsWithoutDefault = []string{"auth_attempt_log_id", "auth_attempt_log_client_type", "auth_attempt_log_client_interface", "auth_attempt_log_client_ip", "auth_attempt_log_client_mac_address", "auth_attempt_log_client_gateway_name", "auth_attempt_log_client_url", "auth_attempt_log_client_hash_id", "auth_attempt_log_origin_url", "auth_attempt_log_theme_spec_path", "auth_attempt_log_opennds_version", "auth_attempt_log_rhid", "auth_attempt_log_session_length_minutes", "auth_attempt_log_upload_rate_threshold", "auth_attempt_log_download_rate_threshold", "auth_attempt_log_upload_quota", "auth_attempt_log_download_quota"}
	authAttemptLogColumnsWithDefault    = []string{"auth_attempt_log_custom_value"}
	authAttemptLogPrimaryKeyColumns     = []string{"auth_attempt_log_id"}
	authAttemptLogGeneratedColumns      = []string{}
)

type (
	// AuthAttemptLogSlice is an alias for a slice of pointers to AuthAttemptLog.
	// This should almost always be used instead of []AuthAttemptLog.
	AuthAttemptLogSlice []*AuthAttemptLog
	// AuthAttemptLogHook is the signature for custom AuthAttemptLog hook methods
	AuthAttemptLogHook func(context.Context, boil.ContextExecutor, *AuthAttemptLog) error

	authAttemptLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authAttemptLogType                 = reflect.TypeOf(&AuthAttemptLog{})
	authAttemptLogMapping              = queries.MakeStructMapping(authAttemptLogType)
	authAttemptLogPrimaryKeyMapping, _ = queries.BindMapping(authAttemptLogType, authAttemptLogMapping, authAttemptLogPrimaryKeyColumns)
	authAttemptLogInsertCacheMut       sync.RWMutex
	authAttemptLogInsertCache          = make(map[string]insertCache)
	authAttemptLogUpdateCacheMut       sync.RWMutex
	authAttemptLogUpdateCache          = make(map[string]updateCache)
	authAttemptLogUpsertCacheMut       sync.RWMutex
	authAttemptLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authAttemptLogAfterSelectHooks []AuthAttemptLogHook

var authAttemptLogBeforeInsertHooks []AuthAttemptLogHook
var authAttemptLogAfterInsertHooks []AuthAttemptLogHook

var authAttemptLogBeforeUpdateHooks []AuthAttemptLogHook
var authAttemptLogAfterUpdateHooks []AuthAttemptLogHook

var authAttemptLogBeforeDeleteHooks []AuthAttemptLogHook
var authAttemptLogAfterDeleteHooks []AuthAttemptLogHook

var authAttemptLogBeforeUpsertHooks []AuthAttemptLogHook
var authAttemptLogAfterUpsertHooks []AuthAttemptLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthAttemptLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAttemptLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthAttemptLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAttemptLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthAttemptLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAttemptLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthAttemptLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAttemptLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthAttemptLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAttemptLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthAttemptLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAttemptLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthAttemptLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAttemptLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthAttemptLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAttemptLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthAttemptLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authAttemptLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthAttemptLogHook registers your hook function for all future operations.
func AddAuthAttemptLogHook(hookPoint boil.HookPoint, authAttemptLogHook AuthAttemptLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authAttemptLogAfterSelectHooks = append(authAttemptLogAfterSelectHooks, authAttemptLogHook)
	case boil.BeforeInsertHook:
		authAttemptLogBeforeInsertHooks = append(authAttemptLogBeforeInsertHooks, authAttemptLogHook)
	case boil.AfterInsertHook:
		authAttemptLogAfterInsertHooks = append(authAttemptLogAfterInsertHooks, authAttemptLogHook)
	case boil.BeforeUpdateHook:
		authAttemptLogBeforeUpdateHooks = append(authAttemptLogBeforeUpdateHooks, authAttemptLogHook)
	case boil.AfterUpdateHook:
		authAttemptLogAfterUpdateHooks = append(authAttemptLogAfterUpdateHooks, authAttemptLogHook)
	case boil.BeforeDeleteHook:
		authAttemptLogBeforeDeleteHooks = append(authAttemptLogBeforeDeleteHooks, authAttemptLogHook)
	case boil.AfterDeleteHook:
		authAttemptLogAfterDeleteHooks = append(authAttemptLogAfterDeleteHooks, authAttemptLogHook)
	case boil.BeforeUpsertHook:
		authAttemptLogBeforeUpsertHooks = append(authAttemptLogBeforeUpsertHooks, authAttemptLogHook)
	case boil.AfterUpsertHook:
		authAttemptLogAfterUpsertHooks = append(authAttemptLogAfterUpsertHooks, authAttemptLogHook)
	}
}

// One returns a single authAttemptLog record from the query.
func (q authAttemptLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthAttemptLog, error) {
	o := &AuthAttemptLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_attempt_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AuthAttemptLog records from the query.
func (q authAttemptLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthAttemptLogSlice, error) {
	var o []*AuthAttemptLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthAttemptLog slice")
	}

	if len(authAttemptLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AuthAttemptLog records in the query.
func (q authAttemptLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_attempt_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authAttemptLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_attempt_log exists")
	}

	return count > 0, nil
}

// AuthAttemptLogs retrieves all the records using an executor.
func AuthAttemptLogs(mods ...qm.QueryMod) authAttemptLogQuery {
	mods = append(mods, qm.From("\"auth_attempt_log\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auth_attempt_log\".*"})
	}

	return authAttemptLogQuery{q}
}

// FindAuthAttemptLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthAttemptLog(ctx context.Context, exec boil.ContextExecutor, authAttemptLogID int64, selectCols ...string) (*AuthAttemptLog, error) {
	authAttemptLogObj := &AuthAttemptLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auth_attempt_log\" where \"auth_attempt_log_id\"=$1", sel,
	)

	q := queries.Raw(query, authAttemptLogID)

	err := q.Bind(ctx, exec, authAttemptLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_attempt_log")
	}

	if err = authAttemptLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authAttemptLogObj, err
	}

	return authAttemptLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthAttemptLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_attempt_log provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authAttemptLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authAttemptLogInsertCacheMut.RLock()
	cache, cached := authAttemptLogInsertCache[key]
	authAttemptLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authAttemptLogAllColumns,
			authAttemptLogColumnsWithDefault,
			authAttemptLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authAttemptLogType, authAttemptLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authAttemptLogType, authAttemptLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auth_attempt_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auth_attempt_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_attempt_log")
	}

	if !cached {
		authAttemptLogInsertCacheMut.Lock()
		authAttemptLogInsertCache[key] = cache
		authAttemptLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AuthAttemptLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthAttemptLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authAttemptLogUpdateCacheMut.RLock()
	cache, cached := authAttemptLogUpdateCache[key]
	authAttemptLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authAttemptLogAllColumns,
			authAttemptLogPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auth_attempt_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auth_attempt_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authAttemptLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authAttemptLogType, authAttemptLogMapping, append(wl, authAttemptLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auth_attempt_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auth_attempt_log")
	}

	if !cached {
		authAttemptLogUpdateCacheMut.Lock()
		authAttemptLogUpdateCache[key] = cache
		authAttemptLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q authAttemptLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auth_attempt_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auth_attempt_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthAttemptLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authAttemptLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auth_attempt_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authAttemptLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authAttemptLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authAttemptLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthAttemptLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_attempt_log provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authAttemptLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authAttemptLogUpsertCacheMut.RLock()
	cache, cached := authAttemptLogUpsertCache[key]
	authAttemptLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authAttemptLogAllColumns,
			authAttemptLogColumnsWithDefault,
			authAttemptLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authAttemptLogAllColumns,
			authAttemptLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auth_attempt_log, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authAttemptLogPrimaryKeyColumns))
			copy(conflict, authAttemptLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auth_attempt_log\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authAttemptLogType, authAttemptLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authAttemptLogType, authAttemptLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auth_attempt_log")
	}

	if !cached {
		authAttemptLogUpsertCacheMut.Lock()
		authAttemptLogUpsertCache[key] = cache
		authAttemptLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AuthAttemptLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthAttemptLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthAttemptLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authAttemptLogPrimaryKeyMapping)
	sql := "DELETE FROM \"auth_attempt_log\" WHERE \"auth_attempt_log_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auth_attempt_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auth_attempt_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authAttemptLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authAttemptLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auth_attempt_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_attempt_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthAttemptLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authAttemptLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authAttemptLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auth_attempt_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authAttemptLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authAttemptLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_attempt_log")
	}

	if len(authAttemptLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthAttemptLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthAttemptLog(ctx, exec, o.AuthAttemptLogID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthAttemptLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthAttemptLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authAttemptLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auth_attempt_log\".* FROM \"auth_attempt_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authAttemptLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthAttemptLogSlice")
	}

	*o = slice

	return nil
}

// AuthAttemptLogExists checks if the AuthAttemptLog row exists.
func AuthAttemptLogExists(ctx context.Context, exec boil.ContextExecutor, authAttemptLogID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auth_attempt_log\" where \"auth_attempt_log_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, authAttemptLogID)
	}
	row := exec.QueryRowContext(ctx, sql, authAttemptLogID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_attempt_log exists")
	}

	return exists, nil
}

// Exists checks if the AuthAttemptLog row exists.
func (o *AuthAttemptLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthAttemptLogExists(ctx, exec, o.AuthAttemptLogID)
}

func chunkAuthAttemptLogs(o []*AuthAttemptLog, chuckSize int) [][]*AuthAttemptLog {
	chunks := make([][]*AuthAttemptLog, 0, (len(o)+chuckSize-1)/chuckSize)

	for chuckSize < len(o) {
		o, chunks = o[chuckSize:], append(chunks, o[0:chuckSize:chuckSize])
	}
	chunks = append(chunks, o)

	return chunks
}

// BulkInsertAuthAttemptLog Ref) https://stackoverflow.com/a/25192138/8979550
func BulkInsertAuthAttemptLog(unsavedRows []*AuthAttemptLog, exec boil.ContextExecutor) error {
	if len(unsavedRows) == 0 {
		return nil
	}

	for _, authAttemptLogs := range chunkAuthAttemptLogs(unsavedRows, 3855) {
		valueStrings := make([]string, 0, len(unsavedRows))
		valueArgs := make([]interface{}, 0, len(unsavedRows)*17)

		for _, authAttemptLog := range authAttemptLogs {
			valueStrings = append(valueStrings, "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)")

			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogClientType)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogClientInterface)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogClientIP)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogClientMacAddress)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogClientGatewayName)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogClientURL)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogClientHashID)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogOriginURL)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogThemeSpecPath)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogOpenndsVersion)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogRhid)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogSessionLengthMinutes)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogUploadRateThreshold)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogDownloadRateThreshold)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogUploadQuota)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogDownloadQuota)
			valueArgs = append(valueArgs, authAttemptLog.AuthAttemptLogCustomValue)
		}
		stmt := fmt.Sprintf(
			"INSERT INTO "+
				TableNames.AuthAttemptLog+
				"("+
				AuthAttemptLogColumns.AuthAttemptLogClientType+", "+
				AuthAttemptLogColumns.AuthAttemptLogClientInterface+", "+
				AuthAttemptLogColumns.AuthAttemptLogClientIP+", "+
				AuthAttemptLogColumns.AuthAttemptLogClientMacAddress+", "+
				AuthAttemptLogColumns.AuthAttemptLogClientGatewayName+", "+
				AuthAttemptLogColumns.AuthAttemptLogClientURL+", "+
				AuthAttemptLogColumns.AuthAttemptLogClientHashID+", "+
				AuthAttemptLogColumns.AuthAttemptLogOriginURL+", "+
				AuthAttemptLogColumns.AuthAttemptLogThemeSpecPath+", "+
				AuthAttemptLogColumns.AuthAttemptLogOpenndsVersion+", "+
				AuthAttemptLogColumns.AuthAttemptLogRhid+", "+
				AuthAttemptLogColumns.AuthAttemptLogSessionLengthMinutes+", "+
				AuthAttemptLogColumns.AuthAttemptLogUploadRateThreshold+", "+
				AuthAttemptLogColumns.AuthAttemptLogDownloadRateThreshold+", "+
				AuthAttemptLogColumns.AuthAttemptLogUploadQuota+", "+
				AuthAttemptLogColumns.AuthAttemptLogDownloadQuota+", "+
				AuthAttemptLogColumns.AuthAttemptLogCustomValue+
				") VALUES %s",
			strings.Join(valueStrings, ","))
		if _, err := exec.Exec(stmt, valueArgs...); err != nil {
			return errors.WithStack(err)
		}
	}

	return nil
}

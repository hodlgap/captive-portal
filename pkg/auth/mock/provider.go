// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hodlgap/captive-portal/pkg/auth (interfaces: Provider)
//
// Generated by this command:
//
//	mockgen -typed -package=auth_mock -destination=mock/provider.go . Provider
//
// Package auth_mock is a generated GoMock package.
package auth_mock

import (
	context "context"
	reflect "reflect"

	auth "github.com/hodlgap/captive-portal/pkg/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockProvider) AddClient(arg0 context.Context, arg1, arg2 string, arg3 *auth.ClientPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClient indicates an expected call of AddClient.
func (mr *MockProviderMockRecorder) AddClient(arg0, arg1, arg2, arg3 any) *ProviderAddClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicy", reflect.TypeOf((*MockProvider)(nil).AddClient), arg0, arg1, arg2, arg3)
	return &ProviderAddClientCall{Call: call}
}

// ProviderAddClientCall wrap *gomock.Call
type ProviderAddClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProviderAddClientCall) Return(arg0 error) *ProviderAddClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProviderAddClientCall) Do(f func(context.Context, string, string, *auth.ClientPolicy) error) *ProviderAddClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProviderAddClientCall) DoAndReturn(f func(context.Context, string, string, *auth.ClientPolicy) error) *ProviderAddClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteClient mocks base method.
func (m *MockProvider) DeleteClient(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockProviderMockRecorder) DeleteClient(arg0, arg1, arg2 any) *ProviderDeleteClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicies", reflect.TypeOf((*MockProvider)(nil).DeleteClient), arg0, arg1, arg2)
	return &ProviderDeleteClientCall{Call: call}
}

// ProviderDeleteClientCall wrap *gomock.Call
type ProviderDeleteClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProviderDeleteClientCall) Return(arg0 error) *ProviderDeleteClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProviderDeleteClientCall) Do(f func(context.Context, string, string) error) *ProviderDeleteClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProviderDeleteClientCall) DoAndReturn(f func(context.Context, string, string) error) *ProviderDeleteClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListClients mocks base method.
func (m *MockProvider) ListClients(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClients", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClients indicates an expected call of ListClients.
func (mr *MockProviderMockRecorder) ListClients(arg0, arg1 any) *ProviderListClientsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClients", reflect.TypeOf((*MockProvider)(nil).ListClients), arg0, arg1)
	return &ProviderListClientsCall{Call: call}
}

// ProviderListClientsCall wrap *gomock.Call
type ProviderListClientsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProviderListClientsCall) Return(arg0 []string, arg1 error) *ProviderListClientsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProviderListClientsCall) Do(f func(context.Context, string) ([]string, error)) *ProviderListClientsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProviderListClientsCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *ProviderListClientsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
